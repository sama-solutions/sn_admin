#!/usr/bin/env python3
"""
Script de v√©rification compl√®te du module sn_admin
Identifie toutes les erreurs potentielles avant l'installation
"""

import os
import re
import sys
from pathlib import Path
import xml.etree.ElementTree as ET


def check_python_syntax():
    """V√©rifier la syntaxe Python de tous les fichiers"""
    print("=" * 60)
    print("1. V√âRIFICATION SYNTAXE PYTHON")
    print("=" * 60)
    
    errors = []
    base_dir = Path(__file__).parent.parent
    models_dir = base_dir / 'models'
    
    for py_file in models_dir.glob('*.py'):
        print(f"\nüìÑ V√©rification: {py_file.name}")
        
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier les imports
            if 'from odoo import' not in content and py_file.name != '__init__.py':
                errors.append(f"‚ùå {py_file.name}: Manque 'from odoo import'")
            
            # V√©rifier les @api.depends sans compute
            depends_matches = re.findall(r'@api\.depends\([^)]+\)', content)
            for match in depends_matches:
                # Chercher la fonction qui suit
                pattern = match.replace('(', r'\(').replace(')', r'\)') + r'\s+def\s+(\w+)'
                func_match = re.search(pattern, content)
                if func_match:
                    func_name = func_match.group(1)
                    # V√©rifier que la fonction est r√©f√©renc√©e dans un compute
                    if f"compute='{func_name}'" not in content and f'compute="{func_name}"' not in content:
                        print(f"‚ö†Ô∏è  Fonction {func_name} a @api.depends mais pas de champ compute correspondant")
            
            # V√©rifier les champs related ET compute sur le m√™me champ
            field_pattern = r"(\w+)\s*=\s*fields\.\w+\([^)]*related=['\"]([^'\"]+)['\"][^)]*\)"
            related_fields = re.findall(field_pattern, content)
            
            for field_name, related_path in related_fields:
                compute_pattern = f"{field_name}\\s*=\\s*fields\\.\\w+\\([^)]*compute="
                if re.search(compute_pattern, content):
                    errors.append(f"‚ùå {py_file.name}: Champ '{field_name}' a √† la fois 'related' ET 'compute'")
            
            # V√©rifier @api.depends('id')
            if "@api.depends('id')" in content or '@api.depends("id")' in content:
                errors.append(f"‚ùå {py_file.name}: Contient @api.depends('id') qui est interdit")
            
            # V√©rifier les {{ ... }}
            if '{{ ... }}' in content:
                errors.append(f"‚ùå {py_file.name}: Contient '{{{{ ... }}}}' (template non r√©solu)")
            
            # Compiler le code Python
            compile(content, py_file.name, 'exec')
            print(f"‚úÖ Syntaxe Python valide")
            
        except SyntaxError as e:
            errors.append(f"‚ùå {py_file.name}: Erreur de syntaxe ligne {e.lineno}: {e.msg}")
            print(f"‚ùå Erreur de syntaxe: {e}")
        except Exception as e:
            errors.append(f"‚ùå {py_file.name}: Erreur: {e}")
            print(f"‚ùå Erreur: {e}")
    
    return errors


def check_xml_syntax():
    """V√©rifier la syntaxe XML de tous les fichiers"""
    print("\n" + "=" * 60)
    print("2. V√âRIFICATION SYNTAXE XML")
    print("=" * 60)
    
    errors = []
    base_dir = Path(__file__).parent.parent
    
    xml_dirs = [
        base_dir / 'views',
        base_dir / 'security',
        base_dir / 'reports',
        base_dir / 'data',
    ]
    
    for xml_dir in xml_dirs:
        if not xml_dir.exists():
            continue
        
        for xml_file in xml_dir.glob('*.xml'):
            print(f"\nüìÑ V√©rification: {xml_file.relative_to(base_dir)}")
            
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                
                # V√©rifier les XPath
                for xpath_elem in root.findall('.//xpath'):
                    expr = xpath_elem.get('expr', '')
                    if not expr:
                        errors.append(f"‚ùå {xml_file.name}: XPath sans expression")
                    
                    # V√©rifier les XPath probl√©matiques
                    if "[@name='department_details']" in expr:
                        errors.append(f"‚ùå {xml_file.name}: XPath utilise 'department_details' qui n'existe pas")
                
                # V√©rifier les attrs (obsol√®te Odoo 18)
                for elem in root.iter():
                    if 'attrs' in elem.attrib:
                        errors.append(f"‚ùå {xml_file.name}: Utilise 'attrs' (obsol√®te Odoo 18)")
                        break
                
                # V√©rifier les <tree> (obsol√®te Odoo 18)
                for tree_elem in root.findall('.//tree'):
                    errors.append(f"‚ùå {xml_file.name}: Utilise <tree> au lieu de <list>")
                    break
                
                # V√©rifier les acc√®s via relation (ex: field.subfield)
                for field_elem in root.findall('.//field'):
                    field_name = field_elem.get('name', '')
                    if '.' in field_name and not field_name.startswith('parent_'):
                        print(f"‚ö†Ô∏è  Acc√®s via relation: {field_name} (peut ne pas fonctionner dans vue h√©rit√©e)")
                
                print(f"‚úÖ XML valide")
                
            except ET.ParseError as e:
                errors.append(f"‚ùå {xml_file.name}: Erreur XML: {e}")
                print(f"‚ùå Erreur XML: {e}")
            except Exception as e:
                errors.append(f"‚ùå {xml_file.name}: Erreur: {e}")
                print(f"‚ùå Erreur: {e}")
    
    return errors


def check_manifest():
    """V√©rifier le fichier __manifest__.py"""
    print("\n" + "=" * 60)
    print("3. V√âRIFICATION __manifest__.py")
    print("=" * 60)
    
    errors = []
    base_dir = Path(__file__).parent.parent
    manifest_file = base_dir / '__manifest__.py'
    
    try:
        with open(manifest_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Compiler le manifest
        manifest_dict = eval(content)
        
        # V√©rifier les d√©pendances
        depends = manifest_dict.get('depends', [])
        print(f"\nüì¶ D√©pendances: {', '.join(depends)}")
        
        enterprise_modules = ['account_accountant', 'social_media', 'studio', 'planning']
        for dep in depends:
            if dep in enterprise_modules:
                errors.append(f"‚ùå D√©pendance Enterprise d√©tect√©e: {dep}")
        
        # V√©rifier que tous les fichiers data existent
        data_files = manifest_dict.get('data', [])
        print(f"\nüìÑ Fichiers data: {len(data_files)}")
        
        for data_file in data_files:
            file_path = base_dir / data_file
            if not file_path.exists():
                errors.append(f"‚ùå Fichier manquant: {data_file}")
                print(f"‚ùå Manquant: {data_file}")
            else:
                print(f"‚úÖ {data_file}")
        
        print(f"\n‚úÖ Manifest valide")
        
    except Exception as e:
        errors.append(f"‚ùå __manifest__.py: Erreur: {e}")
        print(f"‚ùå Erreur: {e}")
    
    return errors


def check_security():
    """V√©rifier les fichiers de s√©curit√©"""
    print("\n" + "=" * 60)
    print("4. V√âRIFICATION S√âCURIT√â")
    print("=" * 60)
    
    errors = []
    base_dir = Path(__file__).parent.parent
    security_dir = base_dir / 'security'
    
    # V√©rifier ir.model.access.csv
    access_file = security_dir / 'ir.model.access.csv'
    if access_file.exists():
        print(f"\nüìÑ V√©rification: ir.model.access.csv")
        
        with open(access_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        models = set()
        for i, line in enumerate(lines[1:], start=2):  # Skip header
            if line.strip():
                parts = line.strip().split(',')
                if len(parts) >= 2:
                    model_ref = parts[2]  # model_id:id
                    models.add(model_ref)
        
        print(f"‚úÖ {len(models)} mod√®les avec droits d'acc√®s")
        
        # V√©rifier que les mod√®les principaux sont couverts
        required_models = [
            'model_sn_ministry',
            'model_sn_category',
            'model_sn_direction',
            'model_sn_service',
            'model_sn_agent',
        ]
        
        for model in required_models:
            if model not in models:
                errors.append(f"‚ùå Mod√®le {model} n'a pas de droits d'acc√®s")
    
    return errors


def main():
    """Fonction principale"""
    print("\n" + "üîç" * 30)
    print("V√âRIFICATION COMPL√àTE DU MODULE sn_admin")
    print("üîç" * 30 + "\n")
    
    all_errors = []
    
    # 1. Python
    all_errors.extend(check_python_syntax())
    
    # 2. XML
    all_errors.extend(check_xml_syntax())
    
    # 3. Manifest
    all_errors.extend(check_manifest())
    
    # 4. S√©curit√©
    all_errors.extend(check_security())
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("R√âSUM√â")
    print("=" * 60)
    
    if all_errors:
        print(f"\n‚ùå {len(all_errors)} ERREUR(S) D√âTECT√âE(S):\n")
        for error in all_errors:
            print(f"  {error}")
        print("\n‚ö†Ô∏è  Le module NE PEUT PAS √™tre install√© en l'√©tat !")
        return 1
    else:
        print("\n‚úÖ AUCUNE ERREUR D√âTECT√âE")
        print("‚úÖ Le module peut √™tre install√©")
        return 0


if __name__ == '__main__':
    sys.exit(main())
